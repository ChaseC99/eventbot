{"version":3,"sources":["AppContext.js","components/navbar/navbar.js","components/tokenInput/tokenInput.js","helpers/slackHelpers.js","components/messageSender/messageSender.js","views/sendMessage.js","views/home.js","App.js","index.js"],"names":["AppContext","createContext","NavBar","props","onLogout","workspace","useContext","className","team","name","onClick","to","TokenInput","onSubmit","type","validateToken","slackClient","a","auth","test","catch","err","Promise","reject","token","loadWorkspace","all","conversations","list","then","result","channels","map","channel","id","sort","c1","c2","info","icon","image_230","MessageSender","messageTextField","useRef","useState","setChannel","event","preventDefault","message","current","value","chat","postMessage","text","console","error","alert","ref","onChange","target","i","SendMessage","Home","WebClient","require","App","localStorage","setToken","setWorkspace","history","useHistory","location","useLocation","useEffect","setItem","login","removeItem","push","pathname","saveToken","Provider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e8131a4.chunk.js","sourcesContent":["import {createContext} from 'react';\n\nconst AppContext = createContext(null);\n\nexport default AppContext;","import './navbar.css';\n\nimport {NavLink} from 'react-router-dom';\nimport { useContext } from 'react';\nimport AppContext from '../../AppContext';\n\nfunction NavBar(props) {\n  const { onLogout } = props;\n  const { workspace } = useContext(AppContext)\n\n  return (\n    <div className=\"nav-bar\">\n        <h1>EventBot</h1>\n        {workspace && \n            <div>\n                <div className=\"workspace\">\n                    <h3>{workspace.team.name}</h3>\n                    <button onClick={onLogout}>Log Out</button>\n                </div>\n                <ul>\n                    <li><NavLink to='/'>Home</NavLink></li>\n                    <li><NavLink to='/sendMessage'>Send Message</NavLink></li>\n                </ul>\n            </div>\n        }\n    </div>\n  );\n}\n\nexport default NavBar;\n","import './tokenInput.css';\n\nfunction TokenInput(props) {\n    const {onSubmit} = props\n    return (\n        <div>\n            <h1>Enter Slack Token</h1>\n            <form onSubmit={onSubmit}>\n                <input type=\"password\" />\n                <input type=\"submit\" />\n            </form>\n        </div>\n    );\n}\n\nexport default TokenInput;\n","const postMessage = (slackClient, message, channel) => {\n    slackClient.chat.postMessage({ text: message, channel: channel }).catch((err) => {\n        console.error(err, {channel, message});\n        alert('Unable to post message. Review the error message in the console.');\n    })\n}\n\nconst validateToken = async (slackClient) => {\n    await slackClient.auth.test().catch(err => {\n        return Promise.reject(`Invalid token: '${slackClient.token}'`)\n    })\n}\n\nconst loadWorkspace = async (slackClient) => {    \n    const [channels, team] = await Promise.all([\n        // Load channels from Slack Workspace\n        // Set selected channel to the first channel in the list\n        slackClient.conversations.list()\n            .then(result => {\n                const channels = result.channels\n                .map(channel => ({id: channel.id, name: channel.name}))\n                .sort((c1, c2) => (c1.name > c2.name) ? 1 : -1);\n                return {channels};\n            }\n        ),\n\n        // Load team information\n        slackClient.team.info()\n            .then(result => {\n                return {team: {name: result.team.name, icon: result.team.icon.image_230}};\n            }\n        )\n    ])\n    \n    return {...channels, ...team }\n}\n\nexport {loadWorkspace, postMessage, validateToken}","import './messageSender.css';\n\nimport {postMessage} from '../../helpers/slackHelpers';\nimport AppContext from '../../AppContext';\nimport {useState, useRef, useContext} from 'react';\n\nfunction MessageSender() {\n  const { workspace: {channels} = {}, slackClient } = useContext(AppContext);\n\n  const messageTextField = useRef(null);\n  const [channel, setChannel] = useState(channels && channels[0].id);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    // Get message from textarea\n    // Return early if message is blank\n    let message = messageTextField.current.value;\n    if (!message) { return }\n\n    // Post the message to slack\n    postMessage(slackClient, message, channel);\n    \n    // Reset the textarea\n    messageTextField.current.value = '';\n  }\n\n  return (\n    <div className=\"message-sender\">\n        <form onSubmit={sendMessage}>\n            <textarea type=\"text\" ref={messageTextField} />\n            <div>\n                <select value={channel} onChange={event => {setChannel(event.target.value)}}>\n                    {channels && channels.map((channel, i) =>\n                    <option key={i} value={channel.id}>{channel.name}</option>\n                    )}\n                </select>\n                <input type=\"submit\" />\n            </div>\n        </form>\n    </div>\n    \n  );\n}\n\nexport default MessageSender;\n","import MessageSender from '../components/messageSender/messageSender'\n\nfunction SendMessage() {\n    return (\n        <div>\n            <h1>Send message</h1>\n            <MessageSender />\n        </div>\n    );\n}\n\nexport default SendMessage;\n","function Home() {\n    return (\n        <div>\n            <h1>Welcome to EventBot</h1>\n            <p>Select an action on the left nav bar</p>\n        </div>\n    );\n}\n\nexport default Home;\n","import './App.css';\nimport {\n  Route,\n  useHistory,\n  useLocation\n} from 'react-router-dom';\nimport {useEffect, useState} from 'react';\nimport NavBar from './components/navbar/navbar';\nimport AppContext from './AppContext';\nimport TokenInput from './components/tokenInput/tokenInput';\nimport {loadWorkspace, validateToken} from './helpers/slackHelpers'\nimport SendMessage from './views/sendMessage';\nimport Home from './views/home';\n\nconst { WebClient } = require('@slack/web-api');\n\nfunction App() {\n  const [token, setToken] = useState(localStorage['slackToken']);\n  const [workspace, setWorkspace] = useState(); \n  const history = useHistory();\n  const location = useLocation();\n  \n  // Create WebClient to interface with Slack API\n  const slackClient = new WebClient(token); \n\n  useEffect(() => {\n    if (token) {\n      // Save Slack token to local storage for future use\n      localStorage.setItem('slackToken', token);\n\n      // Login with new token\n      login()\n    } else {\n      localStorage.removeItem('slackToken');\n      history.push(\"/login\");\n    }\n  }, [token])\n\n  // Logout\n  // Clear token and workspace information\n  const logout = () => {\n    setToken();\n    setWorkspace();\n  }\n\n  // Login\n  // Validate token and load workspace information\n  // If token is invalid, an alert will be shown\n  const login = async () => {\n    try {\n      await validateToken(slackClient);\n      setWorkspace(await loadWorkspace(slackClient));\n      if (location.pathname === '/login') {\n        history.push(\"/\")\n      }\n    } catch(err) {\n      // Token was invalid, reset and display alert\n      setToken()\n      alert(err)\n    }\n  }\n\n  const saveToken = event => {\n    event.preventDefault();\n    setToken(event.target[0].value);\n    event.target[0].value = '';\n  }\n\n  return (\n    <div className=\"App\">\n      <AppContext.Provider value={{slackClient, workspace}}>\n        <NavBar onLogout={logout}/>\n        <div className=\"content\">\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/sendMessage\" component={SendMessage} />\n          <Route path=\"/login\" render={() => <TokenInput onSubmit={saveToken} />} />\n        </div>\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
{"version":3,"sources":["AppContext.js","components/navbar/navbar.js","components/tokenInput/tokenInput.js","helpers/slack.js","components/messageInput/messageInput.js","views/sendMessage.js","views/home.js","views/scheduleMessage.js","views/editMessage.js","App.js","index.js"],"names":["AppContext","createContext","NavBar","props","onLogout","workspace","useContext","className","team","name","onClick","to","TokenInput","onSubmit","type","SlackClient","webclient","this","slackClient","a","validateToken","botInfo","userId","user_id","getMessageHistoryChannel","messageHistoryId","message","channel","log","chat","postMessage","text","catch","err","console","error","alert","resp","saveMessageDetails","post_at","scheduleMessage","scheduledMessages","list","scheduled_messages","scheduled_message_id","deleteScheduledMessage","conversations","types","channels","reduce","val","convo","user","id","history","prevMessages","messages","ts","push","messageDetails","JSON","parse","log_ts","stringify","update","delete","auth","test","Promise","reject","token","all","then","result","map","sort","c1","c2","channelDict","info","icon","image_230","MessageInput","submitAction","Object","values","messageTextField","useRef","selectedChannel","event","preventDefault","current","value","ref","defaultValue","i","SendMessage","Home","ScheduleMessage","isLoading","useState","setScheduledMessages","timeInput","useEffect","loadScheduledMessages","getScheduledMessages","deleteMessage","messageId","channelId","placeholder","channel_id","EditMessage","setPrevMessages","selectedMessageId","setSelectedMessageId","selectedMessageTextArea","loadPrevMessages","updateMessage","oldMessageDetails","updatedText","editMessage","selected","readOnly","resetTextArea","WebClient","require","App","localStorage","setToken","setIsLoading","setSlackClient","setWorkspace","useHistory","location","useLocation","setItem","login","removeItem","init","loadWorkspace","pathname","saveToken","target","Provider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5aa613b.chunk.js","sourcesContent":["import {createContext} from 'react';\n\nconst AppContext = createContext(null);\n\nexport default AppContext;","import './navbar.css';\n\nimport {NavLink} from 'react-router-dom';\nimport { useContext } from 'react';\nimport AppContext from '../../AppContext';\n\nfunction NavBar(props) {\n  const { onLogout } = props;\n  const { workspace } = useContext(AppContext)\n\n  return (\n    <div className=\"nav-bar\">\n        <h1>EventBot</h1>\n        {workspace && \n            <div>\n                <div className=\"workspace\">\n                    <h3>{workspace.team.name}</h3>\n                    <button onClick={onLogout}>Log Out</button>\n                </div>\n                <ul>\n                    <li><NavLink to='/'>Home</NavLink></li>\n                    <li><NavLink to='/sendMessage'>Send Message</NavLink></li>\n                    <li><NavLink to='/scheduleMessage'>Schedule Message</NavLink></li>\n                    <li><NavLink to='/editMessage'>Edit Message</NavLink></li>\n                </ul>\n            </div>\n        }\n    </div>\n  );\n}\n\nexport default NavBar;\n","import './tokenInput.css';\n\nfunction TokenInput(props) {\n    const {onSubmit} = props\n    return (\n        <div>\n            <h1>Enter Slack Token</h1>\n            <form onSubmit={onSubmit}>\n                <input type=\"password\" />\n                <input type=\"submit\" />\n            </form>\n        </div>\n    );\n}\n\nexport default TokenInput;\n","class SlackClient {\n    constructor(webclient) {\n        this.slackClient = webclient;\n    }\n\n    async init() {\n        const botInfo = await this.validateToken();\n        this.userId = botInfo.user_id;\n\n        this.messageHistoryId = await this.getMessageHistoryChannel();\n    }\n\n    async postMessage(message, channel, log=true) {\n        const resp = await this.slackClient.chat.postMessage({ text: message, channel: channel }).catch((err) => {\n            console.error(err, {channel, message});\n            alert(err + \"\\n\\nSee the full error message in the console.\");\n        })\n\n        // Save the message to it's private DMs\n        if (log) { this.saveMessageDetails(resp); }\n        \n        return resp\n    }\n\n    async scheduleMessage(text, channel, post_at) {\n        await this.slackClient.chat.scheduleMessage({ channel, text, post_at }).catch((err) => {\n            console.error(err, {channel, text, post_at});\n            alert('Unable to schedule message. Review the error message in the console.');\n        })\n    }\n\n    async getScheduledMessages() {\n        const resp = await this.slackClient.chat.scheduledMessages.list();\n        return resp.scheduled_messages;\n    }\n\n    async deleteScheduledMessage(scheduled_message_id, channel) {\n        await this.slackClient.chat.deleteScheduledMessage({scheduled_message_id, channel}).catch((err) => {\n            console.error(err, {scheduled_message_id, channel});\n            alert('Unable to delete scheduled message. Review the error message in the console.');\n        });\n    }\n\n    async getMessageHistoryChannel() {\n        // Get a list of all DM conversations\n        const resp = await this.slackClient.conversations.list({types: \"im\"})\n\n        // Reduce that list to the channel id of the conversation with its own id\n        var messageHistoryId = resp.channels.reduce((val, convo) => {\n            return convo.user === this.userId ? convo.id : val\n        }, null);\n        \n        // If the conversation with itself has not started yet,\n        // Create the conversation and save the channel id\n        if (!messageHistoryId) {\n            messageHistoryId = (await this.postMessage(\"Starting message history\", this.userId, false)).channel;\n        }\n\n        return messageHistoryId\n    }\n\n    async loadPrevMessages() {\n        // All previously sent messages are stored in the bot's DM with itself\n        // Load the messages from that private dm channel\n        const resp = await this.slackClient.conversations.history({channel: this.messageHistoryId});\n        \n        const prevMessages = resp.messages.reduce((messages, message) => {\n                try {\n                    const {text, ts} = message\n                    // For all messages in the channel,\n                    // convert them to JSON and add them to the list \n                    messages.push({messageDetails: JSON.parse(text), log_ts: ts})\n                    return messages\n                } catch {\n                    // If the JSON.parse threw an error, ignore that message\n                    return messages\n                }\n            }, []);\n\n        return prevMessages\n    }\n\n    async saveMessageDetails(resp) {\n        const messageDetails = {\n            text: resp.message.text,\n            ts: resp.ts,\n            channel: resp.channel\n        }\n\n        // Send a message to it's own user id, containing the message details\n        // It can retrieve this message later by reading the conversation with itself\n        this.postMessage(JSON.stringify(messageDetails), this.userId, false);\n    }\n\n    async editMessage(channel, ts, text, log_ts) {\n        this.slackClient.chat.update({channel, ts, text})\n        \n        if (log_ts) { \n            // Update the message history DM to have the new text\n            const messageDetails = { text, ts, channel }\n            this.slackClient.chat.update({\n                channel: this.messageHistoryId, \n                ts: log_ts, \n                text: JSON.stringify(messageDetails)\n            }) \n        }\n    }\n\n    async deleteMessage(channel, ts, log_ts) {\n        this.slackClient.chat.delete({channel, ts})\n\n        if (log_ts) {\n            await this.slackClient.chat.delete({channel: this.messageHistoryId, ts: log_ts})\n        }\n    }\n\n    async validateToken() {\n        return await this.slackClient.auth.test()\n            .catch(err => {\n                return Promise.reject(`Invalid token: '${this.slackClient.token}'`)\n            })\n    }\n\n    async loadWorkspace() {    \n        const [channels, team] = await Promise.all([\n            // Load channels from Slack Workspace\n            // Set selected channel to the first channel in the list\n            this.slackClient.conversations.list()\n                .then(result => {\n                    const channels = result.channels\n                    .map(channel => ({id: channel.id, name: channel.name}))\n                    .sort((c1, c2) => (c1.name > c2.name) ? 1 : -1)\n                    .reduce((channelDict, channel) => {\n                        channelDict[channel.id] = {...channel};\n                        return channelDict;\n                    }, {});\n                    return {channels};\n                }\n            ),\n\n            // Load team information\n            this.slackClient.team.info()\n                .then(result => {\n                    return {team: {name: result.team.name, icon: result.team.icon.image_230}};\n                }\n            )\n        ])\n        \n        return {...channels, ...team }\n    }\n}\n\nexport default SlackClient;","import './messageInput.css';\n\nimport AppContext from '../../AppContext';\nimport {useRef, useContext} from 'react';\n\nfunction MessageInput(props) {\n  const {submitAction} = props;\n  \n  const { workspace } = useContext(AppContext);\n  const channels = workspace ? Object.values(workspace.channels).map(channel => { \n    return {...channel}\n  }) : null;\n  const messageTextField = useRef(null);\n  const selectedChannel = useRef(null)\n\n  const formSubmitted = event => {\n    event.preventDefault();\n\n    // Get message and channel\n    // Return early if either is blank\n    let message = messageTextField.current.value;\n    let channel = selectedChannel.current.value\n    if (!message) { return }\n\n    // Handle action\n    submitAction(message, channel);\n    \n    // Reset the textarea\n    messageTextField.current.value = '';\n  }\n\n  return (\n    <div className=\"message-sender\">\n        <form onSubmit={formSubmitted}>\n            <textarea type=\"text\" ref={messageTextField} />\n            <div>\n                <select defaultValue={channels ? channels[0].id : ''} ref={selectedChannel}>\n                    {channels && channels.map((channel, i) =>\n                    <option key={i} value={channel.id}>{channel.name}</option>\n                    )}\n                </select>\n                <input type=\"submit\" />\n            </div>\n        </form>\n    </div>\n    \n  );\n}\n\nexport default MessageInput;\n","import MessageInput from '../components/messageInput/messageInput'\nimport AppContext from '../AppContext';\nimport {useContext} from 'react';\n\nfunction SendMessage() {\n    const { slackClient } = useContext(AppContext);\n\n    const sendMessage = (message, channel) => {\n        slackClient.postMessage(message, channel);\n    }\n\n    return (\n        <div>\n            <h1>Send message</h1>\n            <MessageInput submitAction={sendMessage}/>\n        </div>\n    );\n}\n\nexport default SendMessage;\n","function Home() {\n    return (\n        <div>\n            <h1>Welcome to EventBot</h1>\n            <p>Select an action on the left nav bar</p>\n        </div>\n    );\n}\n\nexport default Home;\n","import './scheduleMessage.css';\n\nimport MessageInput from '../components/messageInput/messageInput'\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport AppContext from '../AppContext';\n\nfunction ScheduleMessage() {\n    const {slackClient, workspace, isLoading} = useContext(AppContext);\n    const [scheduledMessages, setScheduledMessages] = useState([]);\n    const timeInput = useRef(null)\n    \n    useEffect(()=>{\n        if (!isLoading) {loadScheduledMessages()};\n    }, [isLoading])\n\n    const loadScheduledMessages = () => {\n        slackClient.getScheduledMessages().then(messages => {\n            setScheduledMessages(messages);\n        })\n    }\n\n    const scheduleMessage = async (message, channel) => {\n        await slackClient.scheduleMessage(message, channel, timeInput.current.value);\n        loadScheduledMessages();\n    }\n\n    const deleteMessage = async (messageId, channelId) => {\n        await slackClient.deleteScheduledMessage(messageId, channelId);\n        loadScheduledMessages();\n    }\n\n    return (\n        <div>\n            <h1>Schedule message</h1>\n            <input ref={timeInput} placeholder=\"Epoch time\"/>\n            <MessageInput submitAction={scheduleMessage} />\n            <h3>Scheduled Messages</h3>\n            <table>\n                <tbody>\n                <tr>\n                    <th>ID</th>\n                    <th>Channel</th>\n                    <th>Post At</th>\n                    <th>Text</th>\n                    <th>Delete Message</th>\n                </tr>\n                {scheduledMessages.map(message => {\n                    const {id, channel_id, post_at, text} = message;\n\n                    return (\n                        <tr key={id}>\n                            <td>{id}</td>\n                            <td>#{workspace && workspace.channels[channel_id].name}</td>\n                            <td>{post_at}</td>\n                            <td><pre>{text}</pre></td>\n                            <td><button onClick={()=>{deleteMessage(id, channel_id)}}>Delete</button></td>\n                        </tr>\n                    )\n                })}        \n                </tbody>       \n            </table>\n        </div>\n    );\n}\n\nexport default ScheduleMessage;\n","import './scheduleMessage.css';\n\nimport MessageInput from '../components/messageInput/messageInput'\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport AppContext from '../AppContext';\n\nfunction EditMessage() {\n    const {slackClient, workspace, isLoading} = useContext(AppContext);\n    const [prevMessages, setPrevMessages] = useState([]);\n    const [selectedMessageId, setSelectedMessageId] = useState('');\n    const selectedMessageTextArea = useRef(null);\n    \n    useEffect(()=>{\n        if (!isLoading) {loadPrevMessages()};\n    }, [isLoading])\n\n    const loadPrevMessages = () => {\n        slackClient.loadPrevMessages().then(messages => {\n            setPrevMessages(messages)\n        })\n    }\n\n    const editMessage = (id) => {\n        setSelectedMessageId(id)\n    }\n\n    const resetTextArea = (text) => {\n        selectedMessageTextArea.current.value = text; \n        setSelectedMessageId('');\n    }\n\n    const updateMessage = async (oldMessageDetails) => {\n        const {messageDetails: {channel, ts}, log_ts } = oldMessageDetails;\n        const updatedText = selectedMessageTextArea.current.value;\n        await slackClient.editMessage(channel, ts, updatedText, log_ts);\n        setSelectedMessageId('')\n        loadPrevMessages();\n    }\n\n    const deleteMessage = async (oldMessageDetails) => {\n        const {messageDetails: {channel, ts}, log_ts } = oldMessageDetails;\n        await slackClient.deleteMessage(channel, ts, log_ts);\n        loadPrevMessages();\n    }\n\n    return (\n        <div>\n            <h1>Edit message</h1>\n            <p>Select a message below to edit or delete.</p>\n            <h3>Previous Messages</h3>\n            <table>\n                <tbody>\n                <tr>\n                    <th>Channel</th>\n                    <th>Timestamp</th>\n                    <th>Text</th>\n                    <th>Edit</th>\n                    <th>Delete Message</th>\n                </tr>\n                {prevMessages.map(message => {\n                    const {\n                        messageDetails: {channel, ts, text}, \n                        log_ts\n                    } = message;\n\n                    const selected = selectedMessageId===log_ts;\n\n                    return (\n                        <tr key={log_ts}>\n                            <td>#{workspace && workspace.channels[channel].name}</td>\n                            <td>{ts}</td>\n                            <td>\n                                <textarea \n                                    defaultValue={text} \n                                    readOnly={!selected} \n                                    ref={selected ? selectedMessageTextArea : null}\n                                />\n                            </td>\n                            <td>\n                                { selected ?\n                                    <div>\n                                        <button onClick={()=>{resetTextArea(text)}}>Cancel</button>\n                                        <button onClick={()=>{updateMessage(message)}}>Update</button>\n                                    </div>\n                                    :\n                                    <button onClick={()=>{editMessage(log_ts)}}>Edit</button>\n                                }\n                            </td>\n                            <td><button onClick={()=>{deleteMessage(message)}}>Delete</button></td>\n                        </tr>\n                    )\n                })}        \n                </tbody>       \n            </table>\n            {/* <h3>Manual Edit</h3>\n            <p>If the message you want to edit is missing from the list above, you can also manually enter the message below.</p>\n            <p><em>Note: You can only edit messages sent by the bot</em></p>\n            <input placeholder=\"Timestamp\"/>\n            <MessageInput submitAction={scheduleMessage} /> */}\n        </div>\n    );\n}\n\nexport default EditMessage;\n","import './App.css';\nimport {\n  Route,\n  useHistory,\n  useLocation\n} from 'react-router-dom';\nimport {useEffect, useState} from 'react';\nimport NavBar from './components/navbar/navbar';\nimport AppContext from './AppContext';\nimport TokenInput from './components/tokenInput/tokenInput';\nimport SlackClient from './helpers/slack';\nimport SendMessage from './views/sendMessage';\nimport Home from './views/home';\nimport ScheduleMessage from './views/scheduleMessage';\nimport EditMessage from './views/editMessage';\n\nconst { WebClient } = require('@slack/web-api');\n\nfunction App() {\n  const [token, setToken] = useState(localStorage['slackToken']);\n  const [isLoading, setIsLoading] = useState(true);\n  const [slackClient, setSlackClient] = useState();\n  const [workspace, setWorkspace] = useState(); \n  const history = useHistory();\n  const location = useLocation();\n  \n  useEffect(() => {\n    if (token) {\n      // Save Slack token to local storage for future use\n      localStorage.setItem('slackToken', token);\n\n      // Login with new token\n      login()\n    } else {\n      localStorage.removeItem('slackToken');\n      history.push(\"/login\");\n    }\n  }, [token])\n\n  // Logout\n  // Clear token and workspace information\n  const logout = () => {\n    setToken();\n    setWorkspace();\n  }\n\n  // Login\n  // Validate token and load workspace information\n  // If token is invalid, an alert will be shown\n  const login = async () => {\n    try {\n      // Create WebClient to interface with Slack API\n      const slackClient = new SlackClient(new WebClient(token)); \n      await slackClient.init()\n\n      // Update the states\n      setSlackClient(slackClient)\n      setWorkspace(await slackClient.loadWorkspace());\n      setIsLoading(false);\n\n      // If on the login page, redirect home\n      if (location.pathname === '/login') {\n        history.push(\"/\")\n      }\n    } catch(err) {\n      // Token was invalid, reset and display alert\n      setToken()\n      alert(err)\n    }\n  }\n\n  const saveToken = event => {\n    event.preventDefault();\n    setToken(event.target[0].value);\n    event.target[0].value = '';\n  }\n\n  return (\n    <div className=\"App\">\n      <AppContext.Provider value={{slackClient, workspace, isLoading}}>\n        <NavBar onLogout={logout}/>\n        <div className=\"content\">\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/sendMessage\" component={SendMessage} />\n          <Route path=\"/scheduleMessage\" component={ScheduleMessage} />\n          <Route path=\"/editMessage\" component={EditMessage} />\n          <Route path=\"/login\" render={() => <TokenInput onSubmit={saveToken} />} />\n        </div>\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
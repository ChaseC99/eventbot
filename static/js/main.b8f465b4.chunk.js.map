{"version":3,"sources":["AppContext.js","components/navbar/navbar.js","components/tokenInput/tokenInput.js","helpers/slack.js","components/messageInput/messageInput.js","views/sendMessage.js","views/home.js","views/scheduleMessage.js","App.js","index.js"],"names":["AppContext","createContext","NavBar","props","onLogout","workspace","useContext","className","team","name","onClick","to","TokenInput","onSubmit","type","SlackClient","webclient","this","slackClient","message","channel","chat","postMessage","text","catch","err","console","error","alert","post_at","scheduleMessage","a","scheduledMessages","list","resp","scheduled_messages","scheduled_message_id","deleteScheduledMessage","auth","test","Promise","reject","token","all","conversations","then","result","channels","map","id","sort","c1","c2","info","icon","image_230","MessageInput","submitAction","messageTextField","useRef","selectedChannel","event","preventDefault","current","value","ref","defaultValue","i","SendMessage","Home","ScheduleMessage","useState","setScheduledMessages","timeInput","useEffect","loadScheduledMessages","getScheduledMessages","messages","deleteMessage","messageId","channelId","placeholder","channel_id","WebClient","require","App","localStorage","setToken","setWorkspace","history","useHistory","location","useLocation","setItem","login","removeItem","push","validateToken","loadWorkspace","pathname","saveToken","target","Provider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8f465b4.chunk.js","sourcesContent":["import {createContext} from 'react';\n\nconst AppContext = createContext(null);\n\nexport default AppContext;","import './navbar.css';\n\nimport {NavLink} from 'react-router-dom';\nimport { useContext } from 'react';\nimport AppContext from '../../AppContext';\n\nfunction NavBar(props) {\n  const { onLogout } = props;\n  const { workspace } = useContext(AppContext)\n\n  return (\n    <div className=\"nav-bar\">\n        <h1>EventBot</h1>\n        {workspace && \n            <div>\n                <div className=\"workspace\">\n                    <h3>{workspace.team.name}</h3>\n                    <button onClick={onLogout}>Log Out</button>\n                </div>\n                <ul>\n                    <li><NavLink to='/'>Home</NavLink></li>\n                    <li><NavLink to='/sendMessage'>Send Message</NavLink></li>\n                    <li><NavLink to='/scheduleMessage'>Schedule Message</NavLink></li>\n                </ul>\n            </div>\n        }\n    </div>\n  );\n}\n\nexport default NavBar;\n","import './tokenInput.css';\n\nfunction TokenInput(props) {\n    const {onSubmit} = props\n    return (\n        <div>\n            <h1>Enter Slack Token</h1>\n            <form onSubmit={onSubmit}>\n                <input type=\"password\" />\n                <input type=\"submit\" />\n            </form>\n        </div>\n    );\n}\n\nexport default TokenInput;\n","class SlackClient {\n    constructor(webclient) {\n        this.slackClient = webclient;\n    }\n\n    postMessage(message, channel) {\n        this.slackClient.chat.postMessage({ text: message, channel: channel }).catch((err) => {\n            console.error(err, {channel, message});\n            alert('Unable to post message. Review the error message in the console.');\n        })\n    }\n\n    scheduleMessage(text, channel, post_at) {\n        this.slackClient.chat.scheduleMessage({ channel, text, post_at }).catch((err) => {\n            console.error(err, {channel, text, post_at});\n            alert('Unable to schedule message. Review the error message in the console.');\n        })\n    }\n\n    async getScheduledMessages() {\n        const resp = await this.slackClient.chat.scheduledMessages.list();\n        return resp.scheduled_messages;\n    }\n\n    deleteScheduledMessage(scheduled_message_id, channel) {\n        this.slackClient.chat.deleteScheduledMessage({scheduled_message_id, channel}).catch((err) => {\n            console.error(err, {scheduled_message_id, channel});\n            alert('Unable to delete scheduled message. Review the error message in the console.');\n        });\n    }\n\n    async validateToken() {\n        await this.slackClient.auth.test().catch(err => {\n            return Promise.reject(`Invalid token: '${this.slackClient.token}'`)\n        })\n    }\n\n    async loadWorkspace() {    \n        const [channels, team] = await Promise.all([\n            // Load channels from Slack Workspace\n            // Set selected channel to the first channel in the list\n            this.slackClient.conversations.list()\n                .then(result => {\n                    const channels = result.channels\n                    .map(channel => ({id: channel.id, name: channel.name}))\n                    .sort((c1, c2) => (c1.name > c2.name) ? 1 : -1);\n                    return {channels};\n                }\n            ),\n\n            // Load team information\n            this.slackClient.team.info()\n                .then(result => {\n                    return {team: {name: result.team.name, icon: result.team.icon.image_230}};\n                }\n            )\n        ])\n        \n        return {...channels, ...team }\n    }\n}\n\nexport default SlackClient;","import './messageInput.css';\n\nimport AppContext from '../../AppContext';\nimport {useRef, useContext} from 'react';\n\nfunction MessageInput(props) {\n  const {submitAction} = props;\n  \n  const { workspace: {channels} = {} } = useContext(AppContext);\n  \n  const messageTextField = useRef(null);\n  const selectedChannel = useRef(null)\n\n  const formSubmitted = event => {\n    event.preventDefault();\n\n    // Get message and channel\n    // Return early if either is blank\n    let message = messageTextField.current.value;\n    let channel = selectedChannel.current.value\n    if (!message) { return }\n\n    // Handle action\n    submitAction(message, channel);\n    \n    // Reset the textarea\n    messageTextField.current.value = '';\n  }\n\n  return (\n    <div className=\"message-sender\">\n        <form onSubmit={formSubmitted}>\n            <textarea type=\"text\" ref={messageTextField} />\n            <div>\n                <select defaultValue={channels ? channels[0].id : ''} ref={selectedChannel}>\n                    {channels && channels.map((channel, i) =>\n                    <option key={i} value={channel.id}>{channel.name}</option>\n                    )}\n                </select>\n                <input type=\"submit\" />\n            </div>\n        </form>\n    </div>\n    \n  );\n}\n\nexport default MessageInput;\n","import MessageInput from '../components/messageInput/messageInput'\nimport AppContext from '../AppContext';\nimport {useContext} from 'react';\n\nfunction SendMessage() {\n    const { slackClient } = useContext(AppContext);\n\n    const sendMessage = (message, channel) => {\n        slackClient.postMessage(message, channel);\n    }\n\n    return (\n        <div>\n            <h1>Send message</h1>\n            <MessageInput submitAction={sendMessage}/>\n        </div>\n    );\n}\n\nexport default SendMessage;\n","function Home() {\n    return (\n        <div>\n            <h1>Welcome to EventBot</h1>\n            <p>Select an action on the left nav bar</p>\n        </div>\n    );\n}\n\nexport default Home;\n","import MessageInput from '../components/messageInput/messageInput'\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport AppContext from '../AppContext';\n\nfunction ScheduleMessage() {\n    const {slackClient} = useContext(AppContext);\n    const [scheduledMessages, setScheduledMessages] = useState([]);\n    const timeInput = useRef(null)\n    \n    useEffect(()=>{\n        loadScheduledMessages();\n    }, [])\n\n    const scheduleMessage = (message, channel) => {\n        slackClient.scheduleMessage(message, channel, timeInput.current.value);\n    }\n\n    const loadScheduledMessages = () => {\n        slackClient.getScheduledMessages().then(messages => {\n            setScheduledMessages(messages);\n        })\n    }\n\n    const deleteMessage = async (messageId, channelId) => {\n        slackClient.deleteScheduledMessage(messageId, channelId);\n        \n        // Note this is a race condition, since we don't wait for the delete to finsih\n        // TODO: wait for deleteScheduleMessage to finish\n        loadScheduledMessages();\n    }\n\n    return (\n        <div>\n            <h1>Schedule message</h1>\n            <input ref={timeInput} placeholder=\"Epoch time\"/>\n            <MessageInput submitAction={scheduleMessage} />\n            <h3>Scheduled Messages</h3>\n            {scheduledMessages.map(message => {\n                const {id, channel_id, post_at, text} = message;\n\n                return (\n                    <div key={id}>\n                        <div>\n                            <i>{post_at}</i> in {channel_id}\n                        </div>\n                        <p>{text}</p>\n                        <button onClick={()=>{deleteMessage(id, channel_id)}}>Delete</button>\n                    </div>\n                )\n            })}        \n        </div>\n    );\n}\n\nexport default ScheduleMessage;\n","import './App.css';\nimport {\n  Route,\n  useHistory,\n  useLocation\n} from 'react-router-dom';\nimport {useEffect, useState} from 'react';\nimport NavBar from './components/navbar/navbar';\nimport AppContext from './AppContext';\nimport TokenInput from './components/tokenInput/tokenInput';\nimport SlackClient from './helpers/slack';\nimport SendMessage from './views/sendMessage';\nimport Home from './views/home';\nimport ScheduleMessage from './views/scheduleMessage';\n\nconst { WebClient } = require('@slack/web-api');\n\nfunction App() {\n  const [token, setToken] = useState(localStorage['slackToken']);\n  const [workspace, setWorkspace] = useState(); \n  const history = useHistory();\n  const location = useLocation();\n  \n  // Create WebClient to interface with Slack API\n  const slackClient = new SlackClient(new WebClient(token)); \n\n  useEffect(() => {\n    if (token) {\n      // Save Slack token to local storage for future use\n      localStorage.setItem('slackToken', token);\n\n      // Login with new token\n      login()\n    } else {\n      localStorage.removeItem('slackToken');\n      history.push(\"/login\");\n    }\n  }, [token])\n\n  // Logout\n  // Clear token and workspace information\n  const logout = () => {\n    setToken();\n    setWorkspace();\n  }\n\n  // Login\n  // Validate token and load workspace information\n  // If token is invalid, an alert will be shown\n  const login = async () => {\n    try {\n      await slackClient.validateToken();\n      setWorkspace(await slackClient.loadWorkspace());\n      if (location.pathname === '/login') {\n        history.push(\"/\")\n      }\n    } catch(err) {\n      // Token was invalid, reset and display alert\n      setToken()\n      alert(err)\n    }\n  }\n\n  const saveToken = event => {\n    event.preventDefault();\n    setToken(event.target[0].value);\n    event.target[0].value = '';\n  }\n\n  return (\n    <div className=\"App\">\n      <AppContext.Provider value={{slackClient, workspace}}>\n        <NavBar onLogout={logout}/>\n        <div className=\"content\">\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/sendMessage\" component={SendMessage} />\n          <Route path=\"/scheduleMessage\" component={ScheduleMessage} />\n          <Route path=\"/login\" render={() => <TokenInput onSubmit={saveToken} />} />\n        </div>\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
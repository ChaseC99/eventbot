{"version":3,"sources":["components/navbar/navbar.js","components/messageSender/messageSender.js","helpers/slackHelpers.js","App.js","index.js"],"names":["NavBar","props","team","onLogout","name","onClick","MessageSender","channels","slackClient","useState","message","setMessage","id","channel","setChannel","onSubmit","event","preventDefault","chat","postMessage","text","catch","err","alert","console","error","value","onChange","target","map","i","type","loadWorkspace","a","auth","test","Promise","reject","token","all","conversations","list","then","result","sort","c1","c2","info","icon","image_230","WebClient","require","App","localStorage","setToken","workspace","setWorkspace","useEffect","setItem","removeItem","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sLAiBeA,MAff,SAAgBC,GACd,IACIC,EAEAD,EAFAC,KACAC,EACAF,EADAE,SAGJ,OACE,gCACKD,EAAKE,KACN,wBAAQC,QAASF,EAAjB,yB,MC0BOG,MAjCf,SAAuBL,GACrB,IAAQM,EAA0BN,EAA1BM,SAAUC,EAAgBP,EAAhBO,YAElB,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAASF,EAAS,GAAGK,IAAnD,mBAAOC,EAAP,KAAgBC,EAAhB,KAYA,OACE,gCACI,8CACE,uBAAMC,SAbM,SAAAC,GAClBA,EAAMC,iBACNT,EAAYU,KAAKC,YAAY,CAAEC,KAAMV,EAASG,QAASA,IAClDQ,OAAM,SAACC,GACJC,MAAM,oEACNC,QAAQC,MAAMH,EAAK,CAACT,eAE5BF,EAAW,KAML,UACE,wBAAQe,MAAOb,EAASc,SAAU,SAAAX,GAAUF,EAAWE,EAAMY,OAAOF,QAApE,SACGnB,EAASsB,KAAI,SAAChB,EAASiB,GAAV,OACZ,wBAAgBJ,MAAOb,EAAQD,GAA/B,SAAoCC,EAAQT,MAA/B0B,QAGjB,uBAAOC,KAAK,OAAOL,MAAOhB,EAASiB,SAAU,SAAAX,GAAUL,EAAWK,EAAMY,OAAOF,UAC/E,uBAAOK,KAAK,kB,gCC9BlBC,EAAa,uCAAG,WAAOxB,GAAP,qBAAAyB,EAAA,sEAEZzB,EAAY0B,KAAKC,OAAOd,OAAM,SAAAC,GAChC,OAAOc,QAAQC,OAAR,0BAAkC7B,EAAY8B,MAA9C,SAHO,uBAMaF,QAAQG,IAAI,CAGvC/B,EAAYgC,cAAcC,OACrBC,MAAK,SAAAC,GAIF,MAAO,CAACpC,SAHSoC,EAAOpC,SACvBsB,KAAI,SAAAhB,GAAO,MAAK,CAACD,GAAIC,EAAQD,GAAIR,KAAMS,EAAQT,SAC/CwC,MAAK,SAACC,EAAIC,GAAL,OAAaD,EAAGzC,KAAO0C,EAAG1C,KAAQ,GAAK,SAMrDI,EAAYN,KAAK6C,OACZL,MAAK,SAAAC,GACF,MAAO,CAACzC,KAAM,CAACE,KAAMuC,EAAOzC,KAAKE,KAAM4C,KAAML,EAAOzC,KAAK8C,KAAKC,iBArBxD,0CAMX1C,EANW,KAMDL,EANC,kDA0BPK,GAAaL,IA1BN,2CAAH,sDCMXgD,EAAcC,EAAQ,IAAtBD,UA0DOE,MAxDf,WACE,MAA0B3C,mBAAS4C,aAAY,YAA/C,mBAAOf,EAAP,KAAcgB,EAAd,KACA,EAAkC7C,qBAAlC,mBAAO8C,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WAEJnB,EACFN,EAAcxB,GAAakC,MAAK,SAAAa,GAC9BC,EAAaD,GACbF,aAAaK,QAAQ,aAAcpB,MAClCjB,OAAM,SAAAC,GAEPgC,IACA/B,MAAMD,MAGR+B,aAAaM,WAAW,gBAEzB,CAACrB,IAGJ,IAAM9B,EAAc,IAAI0C,EAAUZ,GAclC,OACE,sBAAKsB,UAAU,MAAf,WACItB,GACA,gCACE,mDACA,uBAAMvB,SAVI,SAAAC,GAChBA,EAAMC,iBACNqC,EAAStC,EAAMY,OAAO,GAAGF,QAQnB,UACE,uBAAOK,KAAK,aACZ,uBAAOA,KAAK,iBAIjBwB,GACC,gCACE,cAAC,EAAD,CAAQrD,KAAMqD,EAAUrD,KAAMC,SAvBvB,WACbmD,IACAE,OAsBM,cAAC,EAAD,CAAejD,SAAUgD,EAAUhD,SAAUC,YAAaA,WCpDpEqD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.ce69a5f3.chunk.js","sourcesContent":["import './navbar.css';\n\nfunction NavBar(props) {\n  const {\n      team, \n      onLogout\n  } = props;\n\n  return (\n    <div>\n        {team.name}\n        <button onClick={onLogout}>Log Out</button>\n    </div>\n    \n  );\n}\n\nexport default NavBar;\n","import './messageSender.css';\n\nimport {useState} from 'react';\n\nfunction MessageSender(props) {\n  const { channels, slackClient } = props;\n\n  const [message, setMessage] = useState('');\n  const [channel, setChannel] = useState(channels[0].id);\n\n  const sendMessage = event => {\n    event.preventDefault();\n    slackClient.chat.postMessage({ text: message, channel: channel })\n        .catch((err) => {\n            alert('Unable to post message. Review the error message in the console.')\n            console.error(err, {channel});\n        })\n    setMessage('');\n  }\n\n  return (\n    <div>\n        <h1>Send message</h1>\n          <form onSubmit={sendMessage}>\n            <select value={channel} onChange={event => {setChannel(event.target.value)}}>\n              {channels.map((channel, i) =>\n                <option key={i} value={channel.id}>{channel.name}</option>\n              )}\n            </select>\n            <input type=\"text\" value={message} onChange={event => {setMessage(event.target.value)}} />\n            <input type=\"submit\" />\n          </form>\n    </div>\n    \n  );\n}\n\nexport default MessageSender;\n","const loadWorkspace = async (slackClient) => {\n    // Verify that the token is valid before proceeding\n    await slackClient.auth.test().catch(err => {\n        return Promise.reject(`Invalid token: '${slackClient.token}'`)\n    })\n    \n    const [channels, team] = await Promise.all([\n        // Load channels from Slack Workspace\n        // Set selected channel to the first channel in the list\n        slackClient.conversations.list()\n            .then(result => {\n                const channels = result.channels\n                .map(channel => ({id: channel.id, name: channel.name}))\n                .sort((c1, c2) => (c1.name > c2.name) ? 1 : -1);\n                return {channels};\n            }\n        ),\n\n        // Load team information\n        slackClient.team.info()\n            .then(result => {\n                return {team: {name: result.team.name, icon: result.team.icon.image_230}};\n            }\n        )\n    ])\n    \n    return {...channels, ...team }\n}\n\nexport {loadWorkspace}","import './App.css';\nimport {useEffect, useState} from 'react';\nimport NavBar from './components/navbar/navbar';\nimport MessageSender from './components/messageSender/messageSender'\nimport {loadWorkspace} from './helpers/slackHelpers'\n\nconst { WebClient } = require('@slack/web-api');\n\nfunction App() {\n  const [token, setToken] = useState(localStorage['slackToken']);\n  const [workspace, setWorkspace] = useState(); \n\n  useEffect(() => {\n    // Save Slack token to local storage for future use\n    if (token) {\n      loadWorkspace(slackClient).then(workspace => {\n        setWorkspace(workspace)\n        localStorage.setItem('slackToken', token);\n      }).catch(err => {\n        // If token was invalid, reset the state\n        setToken()\n        alert(err)\n      })\n    } else {\n      localStorage.removeItem('slackToken');\n    }\n  }, [token])\n\n  // Create WebClient to interface with Slack API\n  const slackClient = new WebClient(token);\n\n  // Logout\n  // Clear token and team information\n  const logout = () => {\n    setToken();\n    setWorkspace();\n  }\n\n  const saveToken = event => {\n    event.preventDefault();\n    setToken(event.target[0].value);\n  }\n\n  return (\n    <div className=\"App\">\n      {!token &&\n        <div>\n          <h1>Enter Slack Token</h1>\n          <form onSubmit={saveToken}>\n            <input type=\"password\" />\n            <input type=\"submit\" />\n          </form>\n        </div>\n      }\n      {workspace &&\n        <div>\n          <NavBar team={workspace.team} onLogout={logout}/>\n          <MessageSender channels={workspace.channels} slackClient={slackClient}/>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
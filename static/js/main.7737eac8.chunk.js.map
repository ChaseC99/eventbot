{"version":3,"sources":["AppContext.js","components/navbar/navbar.js","components/tokenInput/tokenInput.js","helpers/slack.js","components/messageTable/messageTable.js","views/editMessage.js","views/home.js","components/messageInput/messageInput.js","components/timepicker/timePicker.js","views/scheduleMessage.js","views/sendMessage.js","App.js","index.js"],"names":["AppContext","createContext","NavBar","onLogout","workspace","useContext","className","team","name","onClick","to","TokenInput","login","useState","token","setToken","loading","setLoading","tokenValid","setTokenValid","handleSubmit","event","a","preventDefault","alert","invalidMessage","onSubmit","htmlFor","type","id","value","onChange","target","required","disabled","slackClient","this","WebClient","defaults","headers","validateToken","botInfo","userId","user_id","_getLogChannel","logChannel","message","channel","log","chat","postMessage","text","catch","err","console","error","resp","_logMessage","ts","log_ts","update","_updateLogMessage","delete","_deleteLogMessage","post_at","scheduleMessage","scheduled_message_id","deleteScheduledMessage","updated_text","scheduledMessages","list","scheduled_messages","conversations","history","prevMessages","messages","reduce","push","messageDetails","JSON","parse","stringify","message_ts","editMessage","types","channels","val","convo","user","auth","test","Promise","reject","all","then","result","map","sort","c1","c2","channelDict","info","icon","image_230","MessageTable","props","onUpdateMessage","onDeleteMessage","showIdCol","selectedMessageId","setSelectedMessageId","selectedMessageTextArea","useRef","generateRow","selected","defaultValue","readOnly","ref","current","resetTextArea","oldMessageDetails","updatedText","updateMessage","EditMessage","setPrevMessages","useEffect","loadPrevMessages","loadLog","deleteMessage","Home","MessageInput","submitAction","Object","values","messageTextField","selectedChannel","i","dateToEpoch","date","Date","TimePicker","currentDate","setSeconds","dateTime","setDateTime","epochTime","setEpochTime","updateTime","newTime","isNaN","timeToEpoch","setParentTimestamp","DatePicker","valueEditFormat","dateStyle","valueDisplayFormat","TimeInput","precision","use12HourClock","ScheduleMessage","setScheduledMessages","timestamp","setTimestamp","loadScheduledMessages","getScheduledMessages","formattedMessages","channel_id","updateScheduledMessage","SendMessage","ProtectedRoute","loggedIn","children","component","render","rest","Component","App","setLoggedIn","setWorkspace","useCallback","init","loadWorkspace","localStorage","setItem","Provider","removeItem","exact","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7737eac8.chunk.js","sourcesContent":["import {createContext} from 'react';\n\nconst AppContext = createContext(null);\n\nexport default AppContext;","import './navbar.css';\n\nimport {NavLink} from 'react-router-dom';\nimport { useContext } from 'react';\nimport AppContext from '../../AppContext';\n\nfunction NavBar({ onLogout }) {\n  const { workspace } = useContext(AppContext)\n\n  return (\n    <div className=\"nav-bar\">\n        <h1>EventBot</h1>\n        {workspace && \n            <div>\n                <div className=\"workspace\">\n                    <h3>{workspace.team.name}</h3>\n                    <button onClick={onLogout}>Log Out</button>\n                </div>\n                <ul>\n                    <li><NavLink to='/'>Home</NavLink></li>\n                    <li><NavLink to='/sendMessage'>Send Message</NavLink></li>\n                    <li><NavLink to='/scheduleMessage'>Schedule Message</NavLink></li>\n                    <li><NavLink to='/editMessage'>Edit Message</NavLink></li>\n                </ul>\n            </div>\n        }\n    </div>\n  );\n}\n\nexport default NavBar;\n","import { useState } from \"react\";\nimport \"./tokenInput.css\";\n\nfunction TokenInput({ login }) {\n  const [token, setToken] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [tokenValid, setTokenValid] = useState(null);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setLoading(true);\n    const valid = await login(token);\n    if (!valid) {\n      setTokenValid(false);\n      setLoading(false);\n      alert(`Invalid token: ${token}`);\n    }\n  };\n\n  const invalidMessage = <div className=\"invalid-feedback\">invalid token</div>;\n\n  return (\n    <div>\n      <h1>Enter Slack Token</h1>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"token-input\">Slack Token</label>\n        <input\n          type=\"password\"\n          id=\"token-input\"\n          value={token}\n          onChange={(event) => setToken(event.target.value)}\n          required\n        />\n        <button type=\"submit\" disabled={loading}>\n          Login\n        </button>\n        {tokenValid === false && invalidMessage}\n      </form>\n    </div>\n  );\n}\n\nexport default TokenInput;\n","import { WebClient } from \"@slack/web-api\";\n\nclass SlackClient {\n    /**\n     * Initializer\n     * This function must be called after constructing a new object.\n     *\n     * Afterwards, the following attributes are loaded on the SlackClient\n     *  slackClient - the Slack WebClient used to communicate with the Web API\n     *  userId      - Bot's ID, used to send DMs to the Bot's channel.\n     *  logChannel  - Channel ID for the bot's log \n     */\n    async init(token) {\n        // Create WebClient to interface with Slack API\n        this.slackClient = new WebClient(token);\n\n        // Remove User-Agent Header since it causes a CORS error on Safari and Firefox\n        delete this.slackClient[\"axios\"].defaults.headers[\"User-Agent\"];\n\n        const botInfo = await this.validateToken();\n        this.userId = botInfo.user_id;\n\n        this.logChannel = await this._getLogChannel();\n    }\n\n    logout() {\n        delete this.slackClient;\n    }\n\n    /**\n     * Post Message\n     * \n     * @param {string} message      - text to send\n     * @param {string} channel      - channel id to send to\n     * @param {boolean=true} log    - log the message, so it can be edited or deleted later\n     * @returns the response from the Slack API call\n     */\n    async postMessage(message, channel, log=true) {\n        const resp = await this.slackClient.chat.postMessage({ text: message, channel: channel }).catch((err) => {\n            console.error(err, {channel, message});\n            alert(err + \"\\n\\nSee the full error message in the console.\");\n        })\n\n        // Save the message to it's private DMs\n        if (log) { this._logMessage(resp.ts, resp.channel, resp.message.text); }\n        \n        return resp\n    }\n\n    /**\n     * Edit Message\n     * \n     * @param {string} channel  - channel id of the message\n     * @param {string} ts       - timestamp of the message\n     * @param {string} text     - updated text to send\n     * @param {string} [log_ts] - timestamp of the assosiated log message\n     */\n    async editMessage(channel, ts, text, log_ts) {\n        this.slackClient.chat.update({channel, ts, text})\n        \n        // Update the message history DM to have the new text\n        if (log_ts) { this._updateLogMessage(log_ts, channel, ts, text) }\n    }\n\n    /**\n     * Delete Message\n     * \n     * @param {string} channel  - channel id of the message\n     * @param {string} ts       - timestamp of the message\n     * @param {string} log_ts   - timestamp of the assosiated log message\n     */\n    async deleteMessage(channel, ts, log_ts) {\n        this.slackClient.chat.delete({channel, ts})\n\n        // Delete the message \n        if (log_ts) { await this._deleteLogMessage(log_ts) }\n    }\n\n    /**\n     * Schedule Message\n     * Schedule a message to send at a future time\n     * \n     * @param {string} text     - text to send\n     * @param {string} channel  - channel id to send to\n     * @param {string} post_at  - epoch timestamp to send the message at\n     */\n    async scheduleMessage(text, channel, post_at) {\n        await this.slackClient.chat.scheduleMessage({ channel, text, post_at }).catch((err) => {\n            console.error(err, {channel, text, post_at});\n            alert('Unable to schedule message. Review the error message in the console.');\n        })\n    }\n\n    /**\n     * Delete Scheduled Message\n     * \n     * @param {string} scheduled_message_id - id of the scheduled message\n     * @param {string} channel              - channel id of the message\n     */\n     async deleteScheduledMessage(scheduled_message_id, channel) {\n        await this.slackClient.chat.deleteScheduledMessage({scheduled_message_id, channel}).catch((err) => {\n            console.error(err, {scheduled_message_id, channel});\n            alert('Unable to delete scheduled message. Review the error message in the console.');\n        });\n    }\n\n    /**\n     * Update Scheduled Message\n     * There is no slack api to update a scheduled message. \n     * Instead we must delete the old message a schedule a new one at the same timestamp.\n     * \n     * @param {string} scheduled_message_id - id of the scheduled message\n     * @param {string} channel              - channel id of the message\n     * @param {string} updated_text         - updated text to send\n     * @param {string} post_at              - epoch timestamp to send the message at\n     */\n    async updateScheduledMessage(scheduled_message_id, channel, updated_text, post_at) {\n        await this.deleteScheduledMessage(scheduled_message_id, channel);\n        await this.scheduleMessage(updated_text, channel, post_at);\n    }\n\n    /**\n     * Get Scheduled Messages\n     * \n     * @returns a list of scheduled messages\n     */\n    async getScheduledMessages() {\n        const resp = await this.slackClient.chat.scheduledMessages.list();\n        return resp.scheduled_messages;\n    }\n\n    /**\n     * Load Log\n     *\n     * @returns a list of messages in the log channel\n     */\n    async loadLog() {\n        // All previously sent messages are stored in the bot's DM with itself\n        // Load the messages from that private dm channel\n        const resp = await this.slackClient.conversations.history({channel: this.logChannel});\n        \n        const prevMessages = resp.messages.reduce((messages, message) => {\n                try {\n                    const {text, ts} = message\n                    // For all messages in the channel,\n                    // convert them to JSON and add them to the list \n                    messages.push({messageDetails: JSON.parse(text), log_ts: ts})\n                    return messages\n                } catch {\n                    // If the JSON.parse threw an error, ignore that message\n                    return messages\n                }\n            }, []);\n\n        return prevMessages\n    }\n\n    /**\n     * Log Message\n     * Save the text, timestamp, and channel of a posted message to the bot's log,\n     * in JSON format, so it can be retrieved later\n     * \n     * Format looks like {text: '{text}', ts: '{ts}', channel: '{channel}'}\n     * \n     * @param {string} ts - timestamp of the assosiated log message\n     * @param {string} channel - channel the message was sent in\n     * @param {string} text - text of the message\n     */\n    async _logMessage(ts, channel, text) {\n        const messageDetails = { text, ts, channel }\n\n        // Send a message to it's own user id, containing the message details\n        // It can retrieve this message later by reading the conversation with itself\n        this.postMessage(JSON.stringify(messageDetails), this.userId, false);\n    }\n\n    /**\n     * Update Log Message\n     * Updates the log message assosiated with a real message\n     * This should be called when a message is edited\n     * \n     * @param {string} log_ts - timestamp of the assosiated log message\n     * @param {string} channel - channel the original message was sent in\n     * @param {string} message_ts - timestamp of the original message\n     * @param {string} text - updated text of the message\n     */\n    async _updateLogMessage(log_ts, channel, message_ts, text) {\n        const messageDetails = { channel, ts: message_ts, text }\n        this.editMessage(this.logChannel, log_ts, JSON.stringify(messageDetails))\n    }\n\n    /**\n     * Delete Log Message\n     * Removes message from the log\n     * This should be called when a message is deleted\n     * \n     * @param {string} log_ts - the timestamp of the logged message (not when the actual message was posted)\n     */\n    async _deleteLogMessage(log_ts) {\n        await this.slackClient.chat.delete({channel: this.logChannel, ts: log_ts})\n    }\n\n    /**\n     * Get Log Channel\n     * The log is stored under the Bot's DMs\n     * This fetches the channel id for that\n     * If the conversation doesn't exist yet, this will start it\n     * \n     * @returns the channel id for the log (Bot's own DMs)\n     */\n    async _getLogChannel() {\n        // Get a list of all DM conversations\n        const resp = await this.slackClient.conversations.list({types: \"im\"})\n\n        // Reduce that list to the channel id of the conversation with its own id\n        var logChannel = resp.channels.reduce((val, convo) => {\n            return convo.user === this.userId ? convo.id : val\n        }, null);\n        \n        // If the conversation with itself has not started yet,\n        // Create the conversation and save the channel id\n        if (!logChannel) {\n            logChannel = (await this.postMessage(\"Starting message history\", this.userId, false)).channel;\n        }\n\n        return logChannel\n    }\n\n    /**\n     * Validate Token\n     * Verify that the token is still valid, but sending a test request\n     * \n     * @returns the response from the auth.test api call\n     */\n    async validateToken() {\n        return await this.slackClient.auth.test()\n            .catch(err => {\n                return Promise.reject(`Invalid token: '${this.slackClient.token}'`)\n            })\n    }\n\n    /**\n     * Load Workspace\n     * Fetch the channels and team information for the worksapce\n     * \n     * @returns an object containg the dictionary of channels and team information\n     * {channels: {id: {id, name}}, team: {team info}}\n     */\n    async loadWorkspace() {    \n        const [channels, team] = await Promise.all([\n            // Load channels from Slack Workspace\n            // Set selected channel to the first channel in the list\n            this.slackClient.conversations.list()\n                .then(result => {\n                    const channels = result.channels\n                    .map(channel => ({id: channel.id, name: channel.name}))\n                    .sort((c1, c2) => (c1.name > c2.name) ? 1 : -1)\n                    .reduce((channelDict, channel) => {\n                        channelDict[channel.id] = {...channel};\n                        return channelDict;\n                    }, {});\n                    return {channels};\n                }\n            ),\n\n            // Load team information\n            this.slackClient.team.info()\n                .then(result => {\n                    return {team: {name: result.team.name, icon: result.team.icon.image_230}};\n                }\n            )\n        ])\n        \n        return {...channels, ...team }\n    }\n}\n\nconst slackClient = new SlackClient();\nexport default slackClient;\n","import { useContext, useRef, useState } from 'react';\nimport AppContext from '../../AppContext';\n\nfunction MessageTable(props) {\n    const {messages, onUpdateMessage, onDeleteMessage, showIdCol=false} = props;\n\n    const {workspace} = useContext(AppContext);\n    const [selectedMessageId, setSelectedMessageId] = useState('');\n    const selectedMessageTextArea = useRef(null);\n\n    const editMessage = (id) => {\n        setSelectedMessageId(id)\n    }\n\n    const resetTextArea = (text) => {\n        selectedMessageTextArea.current.value = text; \n        setSelectedMessageId('');\n    }\n\n    const updateMessage = (oldMessageDetails) => {\n        const updatedText = selectedMessageTextArea.current.value;\n        onUpdateMessage(oldMessageDetails, updatedText);\n        setSelectedMessageId('')\n    }\n\n    const generateRow = (message) => {\n        const {\n            messageDetails: {channel, ts, text}, \n            log_ts\n        } = message;\n\n        const selected = selectedMessageId===log_ts;\n\n        return (\n            <tr key={log_ts}>\n                {showIdCol && <td>{log_ts}</td>}\n                <td>#{workspace && workspace.channels[channel].name}</td>\n                <td>{ts}</td>\n                <td>\n                    <textarea \n                        defaultValue={text} \n                        readOnly={!selected} \n                        ref={selected ? selectedMessageTextArea : null}\n                    />\n                </td>\n                <td>\n                    { selected ?\n                        <div>\n                            <button onClick={()=>{resetTextArea(text)}}>Cancel</button>\n                            <button onClick={()=>{updateMessage(message)}}>Update</button>\n                        </div>\n                        :\n                        <button onClick={()=>{editMessage(log_ts)}}>Edit</button>\n                    }\n                </td>\n                <td><button onClick={()=>{onDeleteMessage(message)}}>Delete</button></td>\n            </tr>\n        )\n    }\n\n    return (\n        <table>\n            <tbody>\n                <tr>\n                    {showIdCol && <th>Id</th>}\n                    <th>Channel</th>\n                    <th>Timestamp</th>\n                    <th>Text</th>\n                    <th>Edit</th>\n                    <th>Delete Message</th>\n                </tr>\n                {messages.map(message => generateRow(message)) }\n            </tbody>       \n        </table>\n    )\n}\n\nexport default MessageTable;","import './scheduleMessage.css';\n\nimport MessageTable from '../components/messageTable/messageTable';\nimport { useContext, useEffect, useState } from 'react';\nimport AppContext from '../AppContext';\nimport slackClient from '../helpers/slack';\n\nfunction EditMessage() {\n    const { workspace } = useContext(AppContext);\n    const [prevMessages, setPrevMessages] = useState([]);\n\n    useEffect(() => {\n      if (workspace) {\n        loadPrevMessages();\n      }\n    }, [workspace]);\n\n    const loadPrevMessages = () => {\n        slackClient.loadLog().then(messages => {\n            setPrevMessages(messages)\n        })\n    }\n\n    const updateMessage = async (oldMessageDetails, updatedText) => {\n        const {messageDetails: {channel, ts}, log_ts } = oldMessageDetails;\n        await slackClient.editMessage(channel, ts, updatedText, log_ts);\n        loadPrevMessages();\n    }\n\n    const deleteMessage = async (oldMessageDetails) => {\n        const {messageDetails: {channel, ts}, log_ts } = oldMessageDetails;\n        await slackClient.deleteMessage(channel, ts, log_ts);\n        loadPrevMessages();\n    }\n\n    return (\n        <div>\n            <h1>Edit message</h1>\n            <p>Select a message below to edit or delete.</p>\n            <h3>Previous Messages</h3>\n            <MessageTable \n                messages={prevMessages}\n                onUpdateMessage={updateMessage}\n                onDeleteMessage={deleteMessage}\n            />\n            {/* <h3>Manual Edit</h3>\n            <p>If the message you want to edit is missing from the list above, you can also manually enter the message below.</p>\n            <p><em>Note: You can only edit messages sent by the bot</em></p>\n            <input placeholder=\"Timestamp\"/>\n            <MessageInput submitAction={scheduleMessage} /> */}\n        </div>\n    );\n}\n\nexport default EditMessage;\n","function Home() {\n    return (\n        <div>\n            <h1>Welcome to EventBot</h1>\n            <p>Select an action on the left nav bar</p>\n        </div>\n    );\n}\n\nexport default Home;\n","import './messageInput.css';\n\nimport AppContext from '../../AppContext';\nimport {useRef, useContext} from 'react';\n\nfunction MessageInput(props) {\n  const {submitAction} = props;\n  \n  const { workspace } = useContext(AppContext);\n  const channels = workspace ? Object.values(workspace.channels).map(channel => { \n    return {...channel}\n  }) : null;\n  const messageTextField = useRef(null);\n  const selectedChannel = useRef(null)\n\n  const formSubmitted = event => {\n    event.preventDefault();\n\n    // Get message and channel\n    // Return early if either is blank\n    let message = messageTextField.current.value;\n    let channel = selectedChannel.current.value\n    if (!message) { return }\n\n    // Handle action\n    submitAction(message, channel);\n    \n    // Reset the textarea\n    messageTextField.current.value = '';\n  }\n\n  return (\n    <div className=\"message-sender\">\n        <form onSubmit={formSubmitted}>\n            <textarea type=\"text\" ref={messageTextField} />\n            <div>\n                <select defaultValue={channels ? channels[0].id : ''} ref={selectedChannel}>\n                    {channels && channels.map((channel, i) =>\n                    <option key={i} value={channel.id}>{channel.name}</option>\n                    )}\n                </select>\n                <input type=\"submit\" />\n            </div>\n        </form>\n    </div>\n    \n  );\n}\n\nexport default MessageInput;\n","import 'react-widgets/styles.css';\nimport DatePicker from 'react-widgets/DatePicker';\nimport TimeInput from 'react-widgets/TimeInput';\n\nimport { useState } from 'react';\n\nfunction dateToEpoch (date) {\n    const timeInEpochSeconds = Date.parse(date)\n\n    // return epoch time in seconds\n    return timeInEpochSeconds / 1000\n}\n\n// Datetime input using \n// React Widgets DatePicker and TimePicker\nfunction TimePicker(props) {\n    const currentDate = new Date();\n    currentDate.setSeconds(0);\n\n    const [dateTime, setDateTime] = useState(currentDate)\n    const [epochTime, setEpochTime] = useState(dateToEpoch(currentDate))\n\n    const updateTime = (newTime) => {\n        if (newTime == null || isNaN(newTime)) {\n            // handles invalid input from datepicker and timeinput\n            setDateTime(currentDate)\n            setEpochTime(dateToEpoch(currentDate))\n        }\n        else {\n            const timeToEpoch = dateToEpoch(newTime);\n            setDateTime(newTime)\n            setEpochTime(timeToEpoch)\n            props.setParentTimestamp(timeToEpoch)\n        }\n    }\n\n    return (\n        <>\n            <DatePicker\n                value={dateTime}\n                valueEditFormat={{ dateStyle: \"short\" }}\n                valueDisplayFormat={{ dateStyle: \"short\" }}\n                onChange={newTime => updateTime(newTime)}\n            />\n\n            <TimeInput\n                value={dateTime}\n                precision=\"seconds\"\n                use12HourClock={true}\n                onChange={newTime => updateTime(newTime)}\n            />\n\n            <h4>Timestamp: {epochTime}</h4>\n        </>\n    )\n}\n\nexport default TimePicker;","import './scheduleMessage.css';\n\nimport MessageInput from '../components/messageInput/messageInput';\nimport TimePicker from '../components/timepicker/timePicker'\nimport { useContext, useEffect, useState } from 'react';\nimport AppContext from '../AppContext';\nimport MessageTable from '../components/messageTable/messageTable';\nimport slackClient from '../helpers/slack';\n\n\nfunction ScheduleMessage() {\n    const { workspace } = useContext(AppContext);\n    const [scheduledMessages, setScheduledMessages] = useState([]);\n    const [timestamp, setTimestamp] = useState(null)\n    \n    useEffect(() => {\n      if (workspace) {\n        loadScheduledMessages();\n      }\n    }, [workspace]);\n\n    const loadScheduledMessages = () => {\n        slackClient.getScheduledMessages().then(messages => {\n            // The list of messages needs to match the structure of messages from slackClient.loadLog()\n            // This map reformats the messages accordingly. The scheduled message id is used as the \"log_ts\".\n            // I realize isn't ideal... maybe we should rework this? \n            const formattedMessages = messages.map(message => {\n                return {\n                    messageDetails: {\n                        channel: message.channel_id,\n                        ts: message.post_at,\n                        text: message.text\n                    },\n                    log_ts: message.id\n                }\n            });\n\n            setScheduledMessages(formattedMessages);\n        })\n    }\n\n    const scheduleMessage = async (message, channel) => {\n        await slackClient.scheduleMessage(message, channel, timestamp);\n        loadScheduledMessages();\n    }\n\n    const updateMessage = async (oldMessageDetails, updatedText) => {\n        const {messageDetails: {channel, ts}, log_ts } = oldMessageDetails;\n        await slackClient.updateScheduledMessage(log_ts, channel, updatedText, ts);\n    }\n\n    const deleteMessage = async (oldMessageDetails) => {\n        const {messageDetails: {channel}, log_ts } = oldMessageDetails;\n        await slackClient.deleteScheduledMessage(log_ts, channel);\n        loadScheduledMessages();\n    }\n\n    return (\n        <div>\n            <h1>Schedule message</h1>\n            <div className=\"datepicker-container\">\n                <TimePicker setParentTimestamp={setTimestamp}/>\n            </div>\n\n            <MessageInput submitAction={scheduleMessage} />\n            <h3>Scheduled Messages</h3>\n            <MessageTable\n                messages={scheduledMessages}\n                onUpdateMessage={updateMessage}\n                onDeleteMessage={deleteMessage}\n                showIdCol={true}\n            />\n        </div>\n    );\n}\n\nexport default ScheduleMessage;\n","import React from \"react\";\nimport MessageInput from '../components/messageInput/messageInput'\n\nimport slackClient from '../helpers/slack';\n\nfunction SendMessage() {\n    const sendMessage = (message, channel) => {\n        slackClient.postMessage(message, channel);\n    }\n\n    return (\n        <div>\n            <h1>Send message</h1>\n            <MessageInput submitAction={sendMessage}/>\n        </div>\n    );\n}\n\nexport default SendMessage;\n","import './App.css';\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\n\nimport AppContext from \"./AppContext\";\nimport NavBar from \"./components/navbar/navbar\";\nimport TokenInput from \"./components/tokenInput/tokenInput\";\nimport slackClient from \"./helpers/slack\";\nimport EditMessage from \"./views/editMessage\";\nimport Home from \"./views/home\";\nimport ScheduleMessage from \"./views/scheduleMessage\";\nimport SendMessage from \"./views/sendMessage\";\n\nfunction App() {\n  // Initially not restricted to private routes\n  const [loggedIn, setLoggedIn] = useState(null);\n  const [workspace, setWorkspace] = useState();\n\n  // Validate token and load workspace information\n  // Returns whether or not the token was validated\n  const login = useCallback(async (token) => {\n    try {\n      // Initialize Slack client with the token\n      await slackClient.init(token);\n\n      setWorkspace(await slackClient.loadWorkspace());\n      setLoggedIn(true);\n      // Save the token for future sessions\n      localStorage.setItem(\"slackToken\", token);\n      return true;\n    } catch (err) {\n      setLoggedIn(false);\n      return false;\n    }\n  }, []);\n\n  // when first loading, log in with the saved token, if any\n  useEffect(() => {\n    const token = localStorage[\"slackToken\"];\n    if (token) {\n      login(token);\n    } else {\n      setLoggedIn(false);\n    }\n  }, [login]);\n\n  // Logout\n  // Clear token and workspace information\n  const logout = () => {\n    localStorage.removeItem(\"slackToken\");\n    // Log out before removing workspace\n    setLoggedIn(false);\n    setWorkspace();\n  };\n\n  return (\n    <div className=\"App\">\n      <AppContext.Provider value={{ workspace }}>\n        <NavBar onLogout={logout} />\n        <div className=\"content\">\n          <Switch>\n            <ProtectedRoute loggedIn={loggedIn} exact path=\"/\" component={Home} />\n            <ProtectedRoute loggedIn={loggedIn} path=\"/sendMessage\">\n              <SendMessage />\n            </ProtectedRoute>\n            <ProtectedRoute loggedIn={loggedIn} path=\"/scheduleMessage\">\n              <ScheduleMessage />\n            </ProtectedRoute>\n            <ProtectedRoute loggedIn={loggedIn} path=\"/editMessage\">\n              <EditMessage />\n            </ProtectedRoute>\n            <Route\n              path=\"/login\"\n              render={() => (loggedIn ? <Redirect to=\"/\" /> : <TokenInput login={login} />)}\n            />\n          </Switch>\n        </div>\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nfunction ProtectedRoute({ loggedIn, children, component, render, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={() => {\n        // redirect if explicitly not logged in\n        if (loggedIn === false) {\n          return <Redirect to=\"/login\" />;\n        }\n        // React expects components to be capitalized\n        const Component = component;\n        return children || <Component /> || render();\n      }}\n    />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
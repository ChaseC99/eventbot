{"version":3,"sources":["AppContext.js","components/navbar/navbar.js","components/tokenInput/tokenInput.js","helpers/slack.js","components/messageInput/messageInput.js","views/sendMessage.js","views/home.js","views/scheduleMessage.js","views/editMessage.js","App.js","index.js"],"names":["AppContext","createContext","NavBar","props","onLogout","workspace","useContext","className","team","name","onClick","to","TokenInput","onSubmit","type","SlackClient","webclient","this","slackClient","a","validateToken","botInfo","userId","user_id","_getLogChannel","logChannel","message","channel","log","chat","postMessage","text","catch","err","console","error","alert","resp","_logMessage","ts","log_ts","update","_updateLogMessage","delete","_deleteLogMessage","post_at","scheduleMessage","scheduled_message_id","deleteScheduledMessage","scheduledMessages","list","scheduled_messages","conversations","history","prevMessages","messages","reduce","push","messageDetails","JSON","parse","stringify","message_ts","editMessage","types","channels","val","convo","user","id","auth","test","Promise","reject","token","all","then","result","map","sort","c1","c2","channelDict","info","icon","image_230","MessageInput","submitAction","Object","values","messageTextField","useRef","selectedChannel","event","preventDefault","current","value","ref","defaultValue","i","SendMessage","Home","ScheduleMessage","isLoading","useState","setScheduledMessages","timeInput","useEffect","loadScheduledMessages","getScheduledMessages","deleteMessage","messageId","channelId","placeholder","channel_id","EditMessage","setPrevMessages","selectedMessageId","setSelectedMessageId","selectedMessageTextArea","loadPrevMessages","loadLog","updateMessage","oldMessageDetails","updatedText","selected","readOnly","resetTextArea","WebClient","require","App","localStorage","setToken","setIsLoading","setSlackClient","setWorkspace","useHistory","location","useLocation","setItem","login","removeItem","init","loadWorkspace","pathname","saveToken","target","Provider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57078118.chunk.js","sourcesContent":["import {createContext} from 'react';\n\nconst AppContext = createContext(null);\n\nexport default AppContext;","import './navbar.css';\n\nimport {NavLink} from 'react-router-dom';\nimport { useContext } from 'react';\nimport AppContext from '../../AppContext';\n\nfunction NavBar(props) {\n  const { onLogout } = props;\n  const { workspace } = useContext(AppContext)\n\n  return (\n    <div className=\"nav-bar\">\n        <h1>EventBot</h1>\n        {workspace && \n            <div>\n                <div className=\"workspace\">\n                    <h3>{workspace.team.name}</h3>\n                    <button onClick={onLogout}>Log Out</button>\n                </div>\n                <ul>\n                    <li><NavLink to='/'>Home</NavLink></li>\n                    <li><NavLink to='/sendMessage'>Send Message</NavLink></li>\n                    <li><NavLink to='/scheduleMessage'>Schedule Message</NavLink></li>\n                    <li><NavLink to='/editMessage'>Edit Message</NavLink></li>\n                </ul>\n            </div>\n        }\n    </div>\n  );\n}\n\nexport default NavBar;\n","import './tokenInput.css';\n\nfunction TokenInput(props) {\n    const {onSubmit} = props\n    return (\n        <div>\n            <h1>Enter Slack Token</h1>\n            <form onSubmit={onSubmit}>\n                <input type=\"password\" />\n                <input type=\"submit\" />\n            </form>\n        </div>\n    );\n}\n\nexport default TokenInput;\n","class SlackClient {\n    constructor(webclient) {\n        this.slackClient = webclient;\n    }\n\n    /**\n     * Initializer\n     * This function must be called after constructing a new object.\n     *\n     * Afterwards, the following attributes are loaded on the SlackClient\n     *  userId      - Bot's ID, used to send DMs to the Bot's channel.\n     *  logChannel  - Channel ID for the bot's log \n     */\n    async init() {\n        const botInfo = await this.validateToken();\n        this.userId = botInfo.user_id;\n\n        this.logChannel = await this._getLogChannel();\n    }\n\n    /**\n     * Post Message\n     * \n     * @param {string} message      - text to send\n     * @param {string} channel      - channel id to send to\n     * @param {boolean=true} log    - log the message, so it can be edited or deleted later\n     * @returns the response from the Slack API call\n     */\n    async postMessage(message, channel, log=true) {\n        const resp = await this.slackClient.chat.postMessage({ text: message, channel: channel }).catch((err) => {\n            console.error(err, {channel, message});\n            alert(err + \"\\n\\nSee the full error message in the console.\");\n        })\n\n        // Save the message to it's private DMs\n        if (log) { this._logMessage(resp.ts, resp.channel, resp.message.text); }\n        \n        return resp\n    }\n\n    /**\n     * Edit Message\n     * \n     * @param {string} channel  - channel id of the message\n     * @param {string} ts       - timestamp of the message\n     * @param {string} text     - updated text to send\n     * @param {string} [log_ts] - timestamp of the assosiated log message\n     */\n    async editMessage(channel, ts, text, log_ts) {\n        this.slackClient.chat.update({channel, ts, text})\n        \n        // Update the message history DM to have the new text\n        if (log_ts) { this._updateLogMessage(log_ts, channel, ts, text) }\n    }\n\n    /**\n     * Delete Message\n     * \n     * @param {string} channel  - channel id of the message\n     * @param {string} ts       - timestamp of the message\n     * @param {string} log_ts   - timestamp of the assosiated log message\n     */\n    async deleteMessage(channel, ts, log_ts) {\n        this.slackClient.chat.delete({channel, ts})\n\n        // Delete the message \n        if (log_ts) { await this._deleteLogMessage(log_ts) }\n    }\n\n    /**\n     * Schedule Message\n     * Schedule a message to send at a future time\n     * \n     * @param {string} text     - text to send\n     * @param {string} channel  - channel id to send to\n     * @param {string} post_at  - epoch timestamp to send the message at\n     */\n    async scheduleMessage(text, channel, post_at) {\n        await this.slackClient.chat.scheduleMessage({ channel, text, post_at }).catch((err) => {\n            console.error(err, {channel, text, post_at});\n            alert('Unable to schedule message. Review the error message in the console.');\n        })\n    }\n\n    /**\n     * Delete Scheduled Message\n     * \n     * @param {string} scheduled_message_id - id of the scheduled message\n     * @param {string} channel              - channel id of the message\n     */\n     async deleteScheduledMessage(scheduled_message_id, channel) {\n        await this.slackClient.chat.deleteScheduledMessage({scheduled_message_id, channel}).catch((err) => {\n            console.error(err, {scheduled_message_id, channel});\n            alert('Unable to delete scheduled message. Review the error message in the console.');\n        });\n    }\n\n    /**\n     * Get Scheduled Messages\n     * \n     * @returns a list of scheduled messages\n     */\n    async getScheduledMessages() {\n        const resp = await this.slackClient.chat.scheduledMessages.list();\n        return resp.scheduled_messages;\n    }\n\n    /**\n     * Load Log\n     *\n     * @returns a list of messages in the log channel\n     */\n    async loadLog() {\n        // All previously sent messages are stored in the bot's DM with itself\n        // Load the messages from that private dm channel\n        const resp = await this.slackClient.conversations.history({channel: this.logChannel});\n        \n        const prevMessages = resp.messages.reduce((messages, message) => {\n                try {\n                    const {text, ts} = message\n                    // For all messages in the channel,\n                    // convert them to JSON and add them to the list \n                    messages.push({messageDetails: JSON.parse(text), log_ts: ts})\n                    return messages\n                } catch {\n                    // If the JSON.parse threw an error, ignore that message\n                    return messages\n                }\n            }, []);\n\n        return prevMessages\n    }\n\n    /**\n     * Log Message\n     * Save the text, timestamp, and channel of a posted message to the bot's log,\n     * in JSON format, so it can be retrieved later\n     * \n     * Format looks like {text: '{text}', ts: '{ts}', channel: '{channel}'}\n     * \n     * @param {string} ts - timestamp of the assosiated log message\n     * @param {string} channel - channel the message was sent in\n     * @param {string} text - text of the message\n     */\n    async _logMessage(ts, channel, text) {\n        const messageDetails = { text, ts, channel }\n\n        // Send a message to it's own user id, containing the message details\n        // It can retrieve this message later by reading the conversation with itself\n        this.postMessage(JSON.stringify(messageDetails), this.userId, false);\n    }\n\n    /**\n     * Update Log Message\n     * Updates the log message assosiated with a real message\n     * This should be called when a message is edited\n     * \n     * @param {string} log_ts - timestamp of the assosiated log message\n     * @param {string} channel - channel the original message was sent in\n     * @param {string} message_ts - timestamp of the original message\n     * @param {string} text - updated text of the message\n     */\n    async _updateLogMessage(log_ts, channel, message_ts, text) {\n        const messageDetails = { channel, ts: message_ts, text }\n        this.editMessage(this.logChannel, log_ts, JSON.stringify(messageDetails))\n    }\n\n    /**\n     * Delete Log Message\n     * Removes message from the log\n     * This should be called when a message is deleted\n     * \n     * @param {string} log_ts - the timestamp of the logged message (not when the actual message was posted)\n     */\n    async _deleteLogMessage(log_ts) {\n        await this.slackClient.chat.delete({channel: this.logChannel, ts: log_ts})\n    }\n\n    /**\n     * Get Log Channel\n     * The log is stored under the Bot's DMs\n     * This fetches the channel id for that\n     * If the conversation doesn't exist yet, this will start it\n     * \n     * @returns the channel id for the log (Bot's own DMs)\n     */\n    async _getLogChannel() {\n        // Get a list of all DM conversations\n        const resp = await this.slackClient.conversations.list({types: \"im\"})\n\n        // Reduce that list to the channel id of the conversation with its own id\n        var logChannel = resp.channels.reduce((val, convo) => {\n            return convo.user === this.userId ? convo.id : val\n        }, null);\n        \n        // If the conversation with itself has not started yet,\n        // Create the conversation and save the channel id\n        if (!logChannel) {\n            logChannel = (await this.postMessage(\"Starting message history\", this.userId, false)).channel;\n        }\n\n        return logChannel\n    }\n\n    /**\n     * Validate Token\n     * Verify that the token is still valid, but sending a test request\n     * \n     * @returns the response from the auth.test api call\n     */\n    async validateToken() {\n        return await this.slackClient.auth.test()\n            .catch(err => {\n                return Promise.reject(`Invalid token: '${this.slackClient.token}'`)\n            })\n    }\n\n    /**\n     * Load Workspace\n     * Fetch the channels and team information for the worksapce\n     * \n     * @returns an object containg the dictionary of channels and team information\n     * {channels: {id: {id, name}}, team: {team info}}\n     */\n    async loadWorkspace() {    \n        const [channels, team] = await Promise.all([\n            // Load channels from Slack Workspace\n            // Set selected channel to the first channel in the list\n            this.slackClient.conversations.list()\n                .then(result => {\n                    const channels = result.channels\n                    .map(channel => ({id: channel.id, name: channel.name}))\n                    .sort((c1, c2) => (c1.name > c2.name) ? 1 : -1)\n                    .reduce((channelDict, channel) => {\n                        channelDict[channel.id] = {...channel};\n                        return channelDict;\n                    }, {});\n                    return {channels};\n                }\n            ),\n\n            // Load team information\n            this.slackClient.team.info()\n                .then(result => {\n                    return {team: {name: result.team.name, icon: result.team.icon.image_230}};\n                }\n            )\n        ])\n        \n        return {...channels, ...team }\n    }\n}\n\nexport default SlackClient;","import './messageInput.css';\n\nimport AppContext from '../../AppContext';\nimport {useRef, useContext} from 'react';\n\nfunction MessageInput(props) {\n  const {submitAction} = props;\n  \n  const { workspace } = useContext(AppContext);\n  const channels = workspace ? Object.values(workspace.channels).map(channel => { \n    return {...channel}\n  }) : null;\n  const messageTextField = useRef(null);\n  const selectedChannel = useRef(null)\n\n  const formSubmitted = event => {\n    event.preventDefault();\n\n    // Get message and channel\n    // Return early if either is blank\n    let message = messageTextField.current.value;\n    let channel = selectedChannel.current.value\n    if (!message) { return }\n\n    // Handle action\n    submitAction(message, channel);\n    \n    // Reset the textarea\n    messageTextField.current.value = '';\n  }\n\n  return (\n    <div className=\"message-sender\">\n        <form onSubmit={formSubmitted}>\n            <textarea type=\"text\" ref={messageTextField} />\n            <div>\n                <select defaultValue={channels ? channels[0].id : ''} ref={selectedChannel}>\n                    {channels && channels.map((channel, i) =>\n                    <option key={i} value={channel.id}>{channel.name}</option>\n                    )}\n                </select>\n                <input type=\"submit\" />\n            </div>\n        </form>\n    </div>\n    \n  );\n}\n\nexport default MessageInput;\n","import MessageInput from '../components/messageInput/messageInput'\nimport AppContext from '../AppContext';\nimport {useContext} from 'react';\n\nfunction SendMessage() {\n    const { slackClient } = useContext(AppContext);\n\n    const sendMessage = (message, channel) => {\n        slackClient.postMessage(message, channel);\n    }\n\n    return (\n        <div>\n            <h1>Send message</h1>\n            <MessageInput submitAction={sendMessage}/>\n        </div>\n    );\n}\n\nexport default SendMessage;\n","function Home() {\n    return (\n        <div>\n            <h1>Welcome to EventBot</h1>\n            <p>Select an action on the left nav bar</p>\n        </div>\n    );\n}\n\nexport default Home;\n","import './scheduleMessage.css';\n\nimport MessageInput from '../components/messageInput/messageInput'\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport AppContext from '../AppContext';\n\nfunction ScheduleMessage() {\n    const {slackClient, workspace, isLoading} = useContext(AppContext);\n    const [scheduledMessages, setScheduledMessages] = useState([]);\n    const timeInput = useRef(null)\n    \n    useEffect(()=>{\n        if (!isLoading) {loadScheduledMessages()};\n    }, [isLoading])\n\n    const loadScheduledMessages = () => {\n        slackClient.getScheduledMessages().then(messages => {\n            setScheduledMessages(messages);\n        })\n    }\n\n    const scheduleMessage = async (message, channel) => {\n        await slackClient.scheduleMessage(message, channel, timeInput.current.value);\n        loadScheduledMessages();\n    }\n\n    const deleteMessage = async (messageId, channelId) => {\n        await slackClient.deleteScheduledMessage(messageId, channelId);\n        loadScheduledMessages();\n    }\n\n    return (\n        <div>\n            <h1>Schedule message</h1>\n            <input ref={timeInput} placeholder=\"Epoch time\"/>\n            <MessageInput submitAction={scheduleMessage} />\n            <h3>Scheduled Messages</h3>\n            <table>\n                <tbody>\n                <tr>\n                    <th>ID</th>\n                    <th>Channel</th>\n                    <th>Post At</th>\n                    <th>Text</th>\n                    <th>Delete Message</th>\n                </tr>\n                {scheduledMessages.map(message => {\n                    const {id, channel_id, post_at, text} = message;\n\n                    return (\n                        <tr key={id}>\n                            <td>{id}</td>\n                            <td>#{workspace && workspace.channels[channel_id].name}</td>\n                            <td>{post_at}</td>\n                            <td><pre>{text}</pre></td>\n                            <td><button onClick={()=>{deleteMessage(id, channel_id)}}>Delete</button></td>\n                        </tr>\n                    )\n                })}        \n                </tbody>       \n            </table>\n        </div>\n    );\n}\n\nexport default ScheduleMessage;\n","import './scheduleMessage.css';\n\nimport MessageInput from '../components/messageInput/messageInput'\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport AppContext from '../AppContext';\n\nfunction EditMessage() {\n    const {slackClient, workspace, isLoading} = useContext(AppContext);\n    const [prevMessages, setPrevMessages] = useState([]);\n    const [selectedMessageId, setSelectedMessageId] = useState('');\n    const selectedMessageTextArea = useRef(null);\n    \n    useEffect(()=>{\n        if (!isLoading) {loadPrevMessages()};\n    }, [isLoading])\n\n    const loadPrevMessages = () => {\n        slackClient.loadLog().then(messages => {\n            setPrevMessages(messages)\n        })\n    }\n\n    const editMessage = (id) => {\n        setSelectedMessageId(id)\n    }\n\n    const resetTextArea = (text) => {\n        selectedMessageTextArea.current.value = text; \n        setSelectedMessageId('');\n    }\n\n    const updateMessage = async (oldMessageDetails) => {\n        const {messageDetails: {channel, ts}, log_ts } = oldMessageDetails;\n        const updatedText = selectedMessageTextArea.current.value;\n        await slackClient.editMessage(channel, ts, updatedText, log_ts);\n        setSelectedMessageId('')\n        loadPrevMessages();\n    }\n\n    const deleteMessage = async (oldMessageDetails) => {\n        const {messageDetails: {channel, ts}, log_ts } = oldMessageDetails;\n        await slackClient.deleteMessage(channel, ts, log_ts);\n        loadPrevMessages();\n    }\n\n    return (\n        <div>\n            <h1>Edit message</h1>\n            <p>Select a message below to edit or delete.</p>\n            <h3>Previous Messages</h3>\n            <table>\n                <tbody>\n                <tr>\n                    <th>Channel</th>\n                    <th>Timestamp</th>\n                    <th>Text</th>\n                    <th>Edit</th>\n                    <th>Delete Message</th>\n                </tr>\n                {prevMessages.map(message => {\n                    const {\n                        messageDetails: {channel, ts, text}, \n                        log_ts\n                    } = message;\n\n                    const selected = selectedMessageId===log_ts;\n\n                    return (\n                        <tr key={log_ts}>\n                            <td>#{workspace && workspace.channels[channel].name}</td>\n                            <td>{ts}</td>\n                            <td>\n                                <textarea \n                                    defaultValue={text} \n                                    readOnly={!selected} \n                                    ref={selected ? selectedMessageTextArea : null}\n                                />\n                            </td>\n                            <td>\n                                { selected ?\n                                    <div>\n                                        <button onClick={()=>{resetTextArea(text)}}>Cancel</button>\n                                        <button onClick={()=>{updateMessage(message)}}>Update</button>\n                                    </div>\n                                    :\n                                    <button onClick={()=>{editMessage(log_ts)}}>Edit</button>\n                                }\n                            </td>\n                            <td><button onClick={()=>{deleteMessage(message)}}>Delete</button></td>\n                        </tr>\n                    )\n                })}        \n                </tbody>       \n            </table>\n            {/* <h3>Manual Edit</h3>\n            <p>If the message you want to edit is missing from the list above, you can also manually enter the message below.</p>\n            <p><em>Note: You can only edit messages sent by the bot</em></p>\n            <input placeholder=\"Timestamp\"/>\n            <MessageInput submitAction={scheduleMessage} /> */}\n        </div>\n    );\n}\n\nexport default EditMessage;\n","import './App.css';\nimport {\n  Route,\n  useHistory,\n  useLocation\n} from 'react-router-dom';\nimport {useEffect, useState} from 'react';\nimport NavBar from './components/navbar/navbar';\nimport AppContext from './AppContext';\nimport TokenInput from './components/tokenInput/tokenInput';\nimport SlackClient from './helpers/slack';\nimport SendMessage from './views/sendMessage';\nimport Home from './views/home';\nimport ScheduleMessage from './views/scheduleMessage';\nimport EditMessage from './views/editMessage';\n\nconst { WebClient } = require('@slack/web-api');\n\nfunction App() {\n  const [token, setToken] = useState(localStorage['slackToken']);\n  const [isLoading, setIsLoading] = useState(true);\n  const [slackClient, setSlackClient] = useState();\n  const [workspace, setWorkspace] = useState(); \n  const history = useHistory();\n  const location = useLocation();\n  \n  useEffect(() => {\n    if (token) {\n      // Save Slack token to local storage for future use\n      localStorage.setItem('slackToken', token);\n\n      // Login with new token\n      login()\n    } else {\n      localStorage.removeItem('slackToken');\n      history.push(\"/login\");\n    }\n  }, [token])\n\n  // Logout\n  // Clear token and workspace information\n  const logout = () => {\n    setToken();\n    setWorkspace();\n  }\n\n  // Login\n  // Validate token and load workspace information\n  // If token is invalid, an alert will be shown\n  const login = async () => {\n    try {\n      // Create WebClient to interface with Slack API\n      const slackClient = new SlackClient(new WebClient(token)); \n      await slackClient.init()\n\n      // Update the states\n      setSlackClient(slackClient)\n      setWorkspace(await slackClient.loadWorkspace());\n      setIsLoading(false);\n\n      // If on the login page, redirect home\n      if (location.pathname === '/login') {\n        history.push(\"/\")\n      }\n    } catch(err) {\n      // Token was invalid, reset and display alert\n      setToken()\n      alert(err)\n    }\n  }\n\n  const saveToken = event => {\n    event.preventDefault();\n    setToken(event.target[0].value);\n    event.target[0].value = '';\n  }\n\n  return (\n    <div className=\"App\">\n      <AppContext.Provider value={{slackClient, workspace, isLoading}}>\n        <NavBar onLogout={logout}/>\n        <div className=\"content\">\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/sendMessage\" component={SendMessage} />\n          <Route path=\"/scheduleMessage\" component={ScheduleMessage} />\n          <Route path=\"/editMessage\" component={EditMessage} />\n          <Route path=\"/login\" render={() => <TokenInput onSubmit={saveToken} />} />\n        </div>\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}